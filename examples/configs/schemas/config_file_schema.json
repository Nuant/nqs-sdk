{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigFile",
  "oneOf": [
    {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "simulation_environment"
          ],
          "properties": {
            "simulation_environment": {
              "$ref": "#/definitions/SimulationEnv"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "backtest_environment"
          ],
          "properties": {
            "backtest_environment": {
              "$ref": "#/definitions/BackTestEnv"
            }
          }
        }
      ],
      "required": [
        "common",
        "version"
      ],
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent"
          }
        },
        "common": {
          "$ref": "#/definitions/CommonConfig"
        },
        "spot": {
          "anyOf": [
            {
              "$ref": "#/definitions/SpotList"
            },
            {
              "type": "null"
            }
          ]
        },
        "version": {
          "type": "string",
          "enum": [
            "1.0.0"
          ]
        }
      }
    }
  ],
  "definitions": {
    "AccountBorrow": {
      "type": "object",
      "properties": {
        "interest_index": {
          "description": "The value of borrow_index prevailing at the time that the debt position was opened.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "principal": {
          "description": "The initial value of the debt position.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Action": {
      "type": "object",
      "required": [
        "action_name",
        "protocol_id"
      ],
      "properties": {
        "action_name": {
          "description": "This is used to define the identifier for a specific action within the platform, serving as a unique label to distinguish one action from another. It is mainly used for debugging purposes and it is typically accompanied by additional properties, such as a description of the action and its associated parameters.",
          "allOf": [
            {
              "$ref": "#/definitions/Identifier"
            }
          ]
        },
        "condition": {
          "description": "A condition is a state that must be reached before the action can be triggered. This ensures that the action is only executed under specified and configurable circumstances. The way a condition can be written is detailed in another section.",
          "anyOf": [
            {
              "$ref": "#/definitions/RawCondition"
            },
            {
              "type": "null"
            }
          ]
        },
        "custom_variables": {
          "description": "Custom variable specific to the action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomVariable"
          }
        },
        "protocol_id": {
          "description": "This is a unique identifier assigned to a specific protocol on which the action is performed. Each protocol has its own set of actions or operations that users can perform. For example, in a lending protocol, actions include the supply of assets to earn interest or borrowing assets against collateral. The ID of the protocol can be found either in the backtest environment section or the simulation environment section.",
          "allOf": [
            {
              "$ref": "#/definitions/IdentifierOrAddr"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "Agent": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "benchmarks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Benchmark"
          }
        },
        "name": {
          "$ref": "#/definitions/Identifier"
        },
        "strategy": {
          "description": "This is the strategy of the agent, which can be made of timed events and/or continuous events. The timed events are events that are triggered at one specific point in time; for example, following a planned announcement. The continuous events can be triggered regularly, following a schedule defined by the user.",
          "allOf": [
            {
              "$ref": "#/definitions/Strategy"
            }
          ]
        },
        "wallet": {
          "description": "These are the initial holdings of the agent, which typically depend on the specific strategy employed and the objectives of the agent. The initial holdings do of course evolve over time as it adjusts positions according to investment strategy and market conditions.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/WalletBalance"
          }
        }
      },
      "additionalProperties": false
    },
    "Amount": {
      "$ref": "#/definitions/Decimal"
    },
    "ArcStr": {
      "description": "[ArcStr] allows us to have immutable str that can be cheaply cloned and possibly cheaply compared if they have the same pointer.",
      "type": "string"
    },
    "BackTestEnv": {
      "type": "object",
      "properties": {
        "protocols_to_replay": {
          "description": "The list of protocols to replay.",
          "allOf": [
            {
              "$ref": "#/definitions/BacktestProtocols"
            }
          ]
        },
        "token_addresses": {
          "description": "A list of ERC20 token addresses used in the backtest.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EthAddr"
          }
        }
      },
      "additionalProperties": false
    },
    "BacktestProtocols": {
      "type": "object",
      "properties": {
        "compound_v2": {
          "anyOf": [
            {
              "$ref": "#/definitions/CompoundV2HistoricalState"
            },
            {
              "type": "null"
            }
          ]
        },
        "uniswap_v3": {
          "anyOf": [
            {
              "$ref": "#/definitions/Pools_for_UniswapV3HistoricalState"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "BalanceUnit": {
      "type": "string",
      "enum": [
        "token0",
        "token1"
      ]
    },
    "Benchmark": {
      "type": "object",
      "required": [
        "strategy_name"
      ],
      "properties": {
        "params": {
          "anyOf": [
            {
              "$ref": "#/definitions/BenchmarkParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "strategy_name": {
          "$ref": "#/definitions/BenchmarkStrategy"
        }
      },
      "additionalProperties": false
    },
    "BenchmarkParams": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "$ref": "#/definitions/Identifier"
        }
      },
      "additionalProperties": false
    },
    "BenchmarkStrategy": {
      "type": "string",
      "enum": [
        "hodl",
        "long_token"
      ]
    },
    "CommonConfig": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "numeraire",
            "timestamp_end",
            "timestamp_start"
          ],
          "properties": {
            "arbitrage_block_frequency": {
              "description": "This is the frequency at which arbitrage opportunities occur within a blockchain or cryptocurrency ecosystem. if it has not been set or is set to 0 then the arbitrage is not simulated",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "block_step_metrics": {
              "description": "This is the number of blocks between two collections of metrics. For example, if set to 1, we collect metrics at every block (granular), but if it is set at 1000, we collect metrics every 1000 blocks (less granular). If set to 0, it will output nothing",
              "anyOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                },
                {
                  "type": "null"
                }
              ],
              "minimum": 0.0
            },
            "collect_all_observables": {
              "description": "Configure step output of all observables for all available observables If set to false, each step will only export selected observables (the default value is true)",
              "type": [
                "boolean",
                "null"
              ]
            },
            "gas_fee": {
              "description": "Gas fee amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Amount"
                }
              ]
            },
            "gas_fee_ccy": {
              "description": "gas fee currency (usually ETH).",
              "default": null,
              "anyOf": [
                {
                  "$ref": "#/definitions/TokenSymbol"
                },
                {
                  "type": "null"
                }
              ]
            },
            "mandatory_tokens": {
              "description": "This refers to tokens that are essential or compulsory for specific activities, strategies, or protocols within the simulation. These tokens play a critical role in facilitating trading, liquidity provision, collateralization, governance, and cross-chain transactions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenSymbol"
              }
            },
            "numeraire": {
              "description": "Numeraire serves as a common reference point or unit of measurement in financial markets, allowing traders, researchers, and investors to quantify and compare the value, performance, and risk of assets and portfolios.",
              "allOf": [
                {
                  "$ref": "#/definitions/TokenSymbol"
                }
              ]
            },
            "plot_output": {
              "description": "This is the visual representation or plotting of output data related to arbitrage opportunities or trading strategies, in order to gain insights, make informed decisions, and monitor performance in the cryptocurrency markets.",
              "type": "boolean"
            },
            "save_metrics": {
              "description": "This involves the saving or storing of trading-related metrics, data, or outputs related to trading strategies. This preservation of metrics and data is to track performance, inform decision-making, and meet compliance requirements in the cryptocurrency trading environment.",
              "type": "boolean"
            },
            "timestamp_end": {
              "description": "The starting timestamp (seconds since epoch) of a simulation.",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "timestamp_start": {
              "description": "The starting timestamp (seconds since epoch) of a simulation.",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "use_arbitrageur": {
              "description": "If the Arbitrageur should be used",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block_number_end",
            "block_number_start",
            "numeraire"
          ],
          "properties": {
            "arbitrage_block_frequency": {
              "description": "This is the frequency at which arbitrage opportunities occur within a blockchain or cryptocurrency ecosystem. if it has not been set or is set to 0 then the arbitrage is not simulated",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "block_number_end": {
              "description": "The block number at which a simulation ends.",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "block_number_start": {
              "description": "The starting block number of a simulation.",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "block_step_metrics": {
              "description": "This is the number of blocks between two collections of metrics. For example, if set to 1, we collect metrics at every block (granular), but if it is set at 1000, we collect metrics every 1000 blocks (less granular). If set to 0, it will output nothing",
              "anyOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                },
                {
                  "type": "null"
                }
              ],
              "minimum": 0.0
            },
            "collect_all_observables": {
              "description": "Configure step output of all observables for all available observables If set to false, each step will only export selected observables (the default value is true)",
              "type": [
                "boolean",
                "null"
              ]
            },
            "gas_fee": {
              "description": "Gas fee amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Amount"
                }
              ]
            },
            "gas_fee_ccy": {
              "description": "gas fee currency (usually ETH).",
              "default": null,
              "anyOf": [
                {
                  "$ref": "#/definitions/TokenSymbol"
                },
                {
                  "type": "null"
                }
              ]
            },
            "mandatory_tokens": {
              "description": "This refers to tokens that are essential or compulsory for specific activities, strategies, or protocols within the simulation. These tokens play a critical role in facilitating trading, liquidity provision, collateralization, governance, and cross-chain transactions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenSymbol"
              }
            },
            "numeraire": {
              "description": "Numeraire serves as a common reference point or unit of measurement in financial markets, allowing traders, researchers, and investors to quantify and compare the value, performance, and risk of assets and portfolios.",
              "allOf": [
                {
                  "$ref": "#/definitions/TokenSymbol"
                }
              ]
            },
            "plot_output": {
              "description": "This is the visual representation or plotting of output data related to arbitrage opportunities or trading strategies, in order to gain insights, make informed decisions, and monitor performance in the cryptocurrency markets.",
              "type": "boolean"
            },
            "save_metrics": {
              "description": "This involves the saving or storing of trading-related metrics, data, or outputs related to trading strategies. This preservation of metrics and data is to track performance, inform decision-making, and meet compliance requirements in the cryptocurrency trading environment.",
              "type": "boolean"
            },
            "use_arbitrageur": {
              "description": "If the Arbitrageur should be used",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CompoundV2CustomState": {
      "type": "object",
      "required": [
        "comptroller",
        "markets"
      ],
      "properties": {
        "comptroller": {
          "description": "The parameters used by the Comptroller smart contract, which orchestrate all the cTokens.",
          "allOf": [
            {
              "$ref": "#/definitions/CompoundV2CustomStateComptroller"
            }
          ]
        },
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Market"
          }
        }
      },
      "additionalProperties": false
    },
    "CompoundV2CustomStateComptroller": {
      "type": "object",
      "required": [
        "close_factor_mantissa",
        "liquidation_incentive_mantissa",
        "max_assets"
      ],
      "properties": {
        "close_factor_mantissa": {
          "description": "The maximum fraction of a debt position that can be repaid in a single transaction during a liquidation.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "liquidation_incentive_mantissa": {
          "description": "The dollar value of collateral that can be seized for every dollar of liquidated debt.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 1.0
        },
        "max_assets": {
          "description": "The maximum number of assets supported by the protocol.",
          "type": "integer",
          "format": "uint8",
          "maximum": 20.0,
          "minimum": 2.0
        }
      },
      "additionalProperties": false
    },
    "CompoundV2HistoricalMarket": {
      "anyOf": [
        {
          "$ref": "#/definitions/TokenSymbol"
        },
        {
          "description": "old redundant way to specify markets",
          "type": "object",
          "required": [
            "market"
          ],
          "properties": {
            "market": {
              "$ref": "#/definitions/TokenSymbol"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CompoundV2HistoricalState": {
      "type": "object",
      "required": [
        "markets"
      ],
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompoundV2HistoricalMarket"
          }
        }
      },
      "additionalProperties": false
    },
    "CompoundV2InitialState": {
      "oneOf": [
        {
          "description": "Custom state is a type of simulation starting state, where the user has the freedom to set all parameters of the initial state of the underlying market and token balances.",
          "type": "object",
          "required": [
            "custom_state"
          ],
          "properties": {
            "custom_state": {
              "$ref": "#/definitions/CompoundV2CustomState"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The historical state is a type of simulation start state. The simulation is initialized using a snapshot of the market at the given starting timestamp or block number.",
          "type": "object",
          "required": [
            "historical_state"
          ],
          "properties": {
            "historical_state": {
              "$ref": "#/definitions/CompoundV2HistoricalState"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CompoundV2Protocol": {
      "type": "object",
      "required": [
        "initial_state",
        "random_generation_params"
      ],
      "properties": {
        "initial_state": {
          "description": "The initial state of the protocol refers to the state of the protocol at the start of the simulation. This includes market parameters and initial balances of the underlying tokens.",
          "allOf": [
            {
              "$ref": "#/definitions/CompoundV2InitialState"
            }
          ]
        },
        "random_generation_params": {
          "description": "Random generator parameters are needed to generate random transactions of simulated users across the simulated protocols.",
          "allOf": [
            {
              "$ref": "#/definitions/Markets_for_CompoundV2RandomGenerationParams"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CompoundV2RandomGenerationParams": {
      "type": "object",
      "required": [
        "market"
      ],
      "properties": {
        "market": {
          "description": "The underlying asset of the market for which the random parameters are set.",
          "allOf": [
            {
              "$ref": "#/definitions/Identifier"
            }
          ]
        }
      }
    },
    "CustomSpot": {
      "type": "object",
      "required": [
        "path",
        "timestamps"
      ],
      "properties": {
        "path": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Amount"
          }
        },
        "timestamps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Timestamp"
          }
        }
      },
      "additionalProperties": false
    },
    "CustomVariable": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
        },
        "value": true
      }
    },
    "Decimal": {
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "string",
          "pattern": "^-?[0-9][0-9_]*(\\.[0-9][0-9_]*)?((e|E)-?[0-9][0-9_]*)?"
        }
      ]
    },
    "Discrete": {
      "type": "object",
      "required": [
        "weights"
      ],
      "properties": {
        "weights": {
          "description": "This refers to the \"discrete\" random process used to sample token_to_add. Outcomes are picked using the weights provided and the sum of the weights should be equal to 1. For example, on any random liquidity minting event, the random agent provides a random token to the pool, and the token is chosen using the discrete weights provided. If the pool has two tokens WETH and WBTC and weights are set as [0.2, 0.8], then in 20% of the cases WETH will be provided, and in 80% of the cases WBTC will be provided.",
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ],
            "minimum": 0.0
          }
        }
      }
    },
    "EthAddr": {
      "type": "string"
    },
    "EthAddress": {
      "$ref": "#/definitions/ArcStr"
    },
    "Event_for_Continuous": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "frequency",
            "name",
            "timestamp"
          ],
          "properties": {
            "actions": {
              "description": "These are the actions to be performed when the event is triggered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            },
            "frequency": {
              "description": "The frequency at which the event will be triggered. Unit in blocks",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "name": {
              "description": "This is used to define the identifier for a specific event within the platform, serving as a unique label to distinguish one event from another. It is mainly used for debugging purposes.",
              "allOf": [
                {
                  "$ref": "#/definitions/ArcStr"
                }
              ]
            },
            "timestamp": {
              "description": "This is the timestamp at which the event is triggered. Unix seconds",
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block_number",
            "frequency",
            "name"
          ],
          "properties": {
            "actions": {
              "description": "These are the actions to be performed when the event is triggered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            },
            "block_number": {
              "description": "This is the block number at which the event is triggered.",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "frequency": {
              "description": "The frequency at which the event will be triggered. Unit in blocks",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "name": {
              "description": "This is used to define the identifier for a specific event within the platform, serving as a unique label to distinguish one event from another. It is mainly used for debugging purposes.",
              "allOf": [
                {
                  "$ref": "#/definitions/ArcStr"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Event_for_Timed": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "name",
            "timestamp"
          ],
          "properties": {
            "actions": {
              "description": "These are the actions to be performed when the event is triggered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            },
            "name": {
              "description": "This is used to define the identifier for a specific event within the platform, serving as a unique label to distinguish one event from another. It is mainly used for debugging purposes.",
              "allOf": [
                {
                  "$ref": "#/definitions/ArcStr"
                }
              ]
            },
            "timestamp": {
              "description": "This is the timestamp at which the event is triggered. Unix seconds",
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block_number",
            "name"
          ],
          "properties": {
            "actions": {
              "description": "These are the actions to be performed when the event is triggered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            },
            "block_number": {
              "description": "This is the block number at which the event is triggered.",
              "allOf": [
                {
                  "$ref": "#/definitions/UIntAmount"
                }
              ]
            },
            "name": {
              "description": "This is used to define the identifier for a specific event within the platform, serving as a unique label to distinguish one event from another. It is mainly used for debugging purposes.",
              "allOf": [
                {
                  "$ref": "#/definitions/ArcStr"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FrequencyDistribution": {
      "oneOf": [
        {
          "description": "A frequency_process used to simulate the frequency of simulated user transactions.",
          "type": "object",
          "required": [
            "poisson"
          ],
          "properties": {
            "poisson": {
              "$ref": "#/definitions/PoissonDistribution"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "linear"
          ],
          "properties": {
            "linear": {
              "$ref": "#/definitions/LinearDistribution"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HistoricalSpot": {
      "type": "object",
      "properties": {
        "process_start_timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Identifier": {
      "allOf": [
        {
          "$ref": "#/definitions/ArcStr"
        }
      ],
      "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
    },
    "IdentifierOrAddr": {
      "anyOf": [
        {
          "$ref": "#/definitions/EthAddress"
        },
        {
          "$ref": "#/definitions/Identifier"
        }
      ]
    },
    "InterestRateModel": {
      "type": "object",
      "properties": {
        "base_rate_per_block": {
          "description": "The prevailing rate when the utilisation rate is 0.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "jump_multiplier_per_block": {
          "description": "The multiplier used when the utilisation rate is greater than the target utilization rate or \"kink\".",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "kink": {
          "description": "The value of utilisation rate at which interest rate changes more dramatically. Borrowing above the \"kink\", quickly becomes expensive.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "multiplier_per_block": {
          "description": "The multiplier used when the utilisation rate is lower than the target utilization rate or \"kink\".",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "LinearDistribution": {
      "type": "object",
      "required": [
        "nb_of_users_to_simulate"
      ],
      "properties": {
        "nb_of_users_to_simulate": {
          "description": "The number of user to simulate via distribution",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Market": {
      "description": "Compound market state is the simulated condition or status of the Compound protocol within the simulation environment.",
      "type": "object",
      "required": [
        "interest_rate_model",
        "market"
      ],
      "properties": {
        "account_borrows": {
          "description": "This tracks the total outstanding borrowings associated with a specific user account within the protocol.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AccountBorrow"
          }
        },
        "borrow_cap": {
          "description": "This sets a maximum limit on the total amount of assets that can be borrowed. Once this limit is reached, users are unable to borrow additional assets, unless the borrow_cap is increased.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "borrow_index": {
          "description": "The value of the borrow index at the start of the simulation.",
          "allOf": [
            {
              "$ref": "#/definitions/SimUint256"
            }
          ]
        },
        "collateral_factor": {
          "description": "The collateral factor of the market is the value ratio of the collateral asset to the value of the borrowed asset. This determines the amount of collateral required to borrow assets or to maintain a borrowing position within the protocol. For example, if the collateral factor is set to 50%, it means that users may only borrow up to 50% of the collateral that they provided. So, 100USDC must be provided to borrow 50USDC worth of a token.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "initial_exchange_rate_mantissa": {
          "description": "The base exchange rate between cToken and the underlying Token when the total supply is 0.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "interest_rate_model": {
          "description": "The model parameters used to simulate interest rates within the simulated environment.",
          "allOf": [
            {
              "$ref": "#/definitions/InterestRateModel"
            }
          ]
        },
        "market": {
          "description": "The underlying asset (token symbol) of the compound market.",
          "allOf": [
            {
              "$ref": "#/definitions/TokenSymbol"
            }
          ]
        },
        "reserve_factor_mantissa": {
          "description": "The reserve factor on the market set by the simulated protocol.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "total_borrows": {
          "description": "The total amount of borrows at the beginning of the simulation.",
          "allOf": [
            {
              "$ref": "#/definitions/SimUint256"
            }
          ]
        },
        "total_cash": {
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "total_reserves": {
          "description": "The total amount of reserves at the beginning of the simulation.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "total_supply": {
          "description": "The total supply of cToken at the beginning of the simulation.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "underlying_price": {
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Markets_for_CompoundV2RandomGenerationParams": {
      "type": "object",
      "required": [
        "markets"
      ],
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompoundV2RandomGenerationParams"
          }
        }
      }
    },
    "NormalDistribution": {
      "type": "object",
      "required": [
        "mean",
        "std"
      ],
      "properties": {
        "mean": {
          "description": "This parameter in a normal random process represents the average or central tendency of the distribution. It defines the central value around which randomly generated values are clustered or observed. The value is in Token units (and NOT cToken).",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ]
        },
        "std": {
          "description": "This parameter in a normal random process measures the dispersion or variability around the central tendency of the distribution. It indicates the spread of random values above and below the mean. The value is in Token units (and NOT cToken).",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoissonDistribution": {
      "type": "object",
      "required": [
        "nb_of_users_to_simulate"
      ],
      "properties": {
        "nb_of_users_to_simulate": {
          "description": "The number of user to simulate via distribution",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Pool_for_TransactionGeneration": {
      "type": "object",
      "required": [
        "pool_name"
      ],
      "properties": {
        "pool_name": {
          "$ref": "#/definitions/IdentifierOrAddr"
        }
      }
    },
    "Pool_for_UniswapV3CustomState": {
      "type": "object",
      "required": [
        "fee_tier",
        "initial_balance",
        "pool_name",
        "symbol_token0",
        "symbol_token1"
      ],
      "properties": {
        "fee_tier": {
          "description": "The fee tier of the pool.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "initial_balance": {
          "description": "Parameters to define the initial balance in the pool.",
          "allOf": [
            {
              "$ref": "#/definitions/UniswapV3InitialBalance"
            }
          ]
        },
        "pool_name": {
          "$ref": "#/definitions/IdentifierOrAddr"
        },
        "symbol_token0": {
          "description": "The symbol of the first token in the selected pool.",
          "allOf": [
            {
              "$ref": "#/definitions/TokenSymbol"
            }
          ]
        },
        "symbol_token1": {
          "description": "The symbol of the second token in the selected pool.",
          "allOf": [
            {
              "$ref": "#/definitions/TokenSymbol"
            }
          ]
        }
      }
    },
    "Pool_for_UniswapV3HistoricalState": {
      "type": "object",
      "required": [
        "address",
        "pool_name"
      ],
      "properties": {
        "address": {
          "description": "The address of the real-world pool used to fetch the initial state of the simulated pool.",
          "allOf": [
            {
              "$ref": "#/definitions/EthAddr"
            }
          ]
        },
        "pool_name": {
          "$ref": "#/definitions/IdentifierOrAddr"
        }
      }
    },
    "Pools_for_TransactionGeneration": {
      "type": "object",
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pool_for_TransactionGeneration"
          }
        }
      }
    },
    "Pools_for_UniswapV3CustomState": {
      "type": "object",
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pool_for_UniswapV3CustomState"
          }
        }
      }
    },
    "Pools_for_UniswapV3HistoricalState": {
      "type": "object",
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pool_for_UniswapV3HistoricalState"
          }
        }
      }
    },
    "RawCondition": {
      "description": "A microlanguage expression resolving to a boolean",
      "allOf": [
        {
          "$ref": "#/definitions/ArcStr"
        }
      ]
    },
    "SimUint256": {
      "oneOf": [
        {
          "type": "number",
          "minimum": 0.0
        },
        {
          "type": "string",
          "pattern": "^(0x[0-9a-fA-F_]+|[0-9][0-9_]*((e|E)[0-9][0-9_]*)?)$"
        }
      ],
      "minimum": 0.0
    },
    "SimulationEnv": {
      "type": "object",
      "properties": {
        "protocols_to_simulate": {
          "description": "The protocols to simulate",
          "allOf": [
            {
              "$ref": "#/definitions/SimulationProtocols"
            }
          ]
        },
        "seed": {
          "description": "the randomness seed. Order should be always guaranteed to be deterministic, Once initialized use a serializable instance of Lcg128Xsl64",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "tokens_info": {
          "description": "The token info name + decimal",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TokenDetail"
          }
        }
      },
      "additionalProperties": false
    },
    "SimulationProtocols": {
      "type": "object",
      "properties": {
        "compound_v2": {
          "anyOf": [
            {
              "$ref": "#/definitions/CompoundV2Protocol"
            },
            {
              "type": "null"
            }
          ]
        },
        "uniswap_v3": {
          "anyOf": [
            {
              "$ref": "#/definitions/UniswapV3Protocol"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "Spot": {
      "anyOf": [
        {
          "description": "White Gaussian Noise is a stochastic process often used to represent random market fluctuations or random noise in data. The parameters are ignored,if calibrated as True, but are mandatory if calibrated as False.",
          "type": "object",
          "required": [
            "name",
            "wgn"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/TokenSymbolPair"
            },
            "wgn": {
              "$ref": "#/definitions/WhiteGaussianNoise"
            }
          }
        },
        {
          "description": "Geometric Brownian Motion is a stochastic process commonly used to model the dynamics of asset prices. It describes the continuous-time evolution of the asset price, where the rate of change of the variable is proportional to its current value, also taking into consideration random fluctuations represented by WGN. The parameters are ignored,if calibrated as True, but are mandatory if calibrated as False.",
          "type": "object",
          "required": [
            "gbm",
            "name"
          ],
          "properties": {
            "gbm": {
              "$ref": "#/definitions/SpotMuProps"
            },
            "name": {
              "$ref": "#/definitions/TokenSymbolPair"
            }
          }
        },
        {
          "description": "Ornstein-Uhlenbeck process is a stochastic process commonly used to model mean-reverting processes, where the variable tends to revert towards a long-term mean or equilibrium level.",
          "type": "object",
          "required": [
            "name",
            "ou"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/TokenSymbolPair"
            },
            "ou": {
              "$ref": "#/definitions/SpotMeanProps"
            }
          }
        },
        {
          "description": "Custom process, where timestamps and corresponding spot values are provided as lists of integers and floats respectively.",
          "type": "object",
          "required": [
            "custom",
            "name"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomSpot"
            },
            "name": {
              "$ref": "#/definitions/TokenSymbolPair"
            }
          }
        },
        {
          "description": "Historical process. If process_start_timestamp is provided, the realised historical path will start from that point in time. Otherwise, the starting point will be the same as the timestamp for the simulation start.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "historical": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HistoricalSpot"
                },
                {
                  "type": "null"
                }
              ]
            },
            "name": {
              "$ref": "#/definitions/TokenSymbolPair"
            }
          }
        }
      ]
    },
    "SpotList": {
      "type": "object",
      "required": [
        "spot_list"
      ],
      "properties": {
        "correlation": {
          "description": "Correlation measures the degree to which different spot parameters or array asset prices move in relation to each other.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Amount"
            }
          }
        },
        "spot_list": {
          "description": "A list of spot processes, where the list is made of different spot pairs that are to be simulated. For example, one entry could be WETH/USDC and another WBTC/USDT.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Spot"
          }
        }
      }
    },
    "SpotMeanProps": {
      "type": "object",
      "properties": {
        "mean": {
          "$ref": "#/definitions/Amount"
        },
        "s0": {
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "vol": {
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "SpotMuProps": {
      "type": "object",
      "properties": {
        "mu": {
          "$ref": "#/definitions/Amount"
        },
        "s0": {
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "vol": {
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Strategy": {
      "type": "object",
      "properties": {
        "continuous_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event_for_Continuous"
          }
        },
        "custom_variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomVariable"
          }
        },
        "timed_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event_for_Timed"
          }
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "type": "integer",
      "format": "int64"
    },
    "TokenDetail": {
      "type": "object",
      "required": [
        "decimals"
      ],
      "properties": {
        "decimals": {
          "$ref": "#/definitions/UIntAmount"
        }
      },
      "additionalProperties": false
    },
    "TokenSymbol": {
      "$ref": "#/definitions/ArcStr"
    },
    "TokenSymbolPair": {
      "type": "string",
      "pattern": "^[^/]+/[^/]+$"
    },
    "TransactionGenerationParams": {
      "type": "object",
      "required": [
        "frequency"
      ],
      "properties": {
        "frequency": {
          "description": "Parameters needed to simulate the frequency of the transactions made by simulated users.",
          "allOf": [
            {
              "$ref": "#/definitions/FrequencyDistribution"
            }
          ]
        },
        "tick_spacing": {
          "anyOf": [
            {
              "$ref": "#/definitions/UIntAmount"
            },
            {
              "type": "null"
            }
          ]
        },
        "values": {
          "description": "Parameters needed to simulate the value of simulated users' transactions.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ValueDistribution"
          }
        }
      },
      "additionalProperties": false
    },
    "UIntAmount": {
      "oneOf": [
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        {
          "type": "string",
          "pattern": "^[0-9][0-9_]*((e|E)[0-9][0-9_]*)?$"
        }
      ],
      "minimum": 0.0
    },
    "UniformDistribution": {
      "type": "object",
      "required": [
        "max",
        "min"
      ],
      "properties": {
        "max": {
          "description": "This number refers to the maximum end of the range within which random values are generated or observed. The value is in Token units (and NOT cToken).",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ]
        },
        "min": {
          "description": "This number refers to the minimum end of the range within which random values are generated or observed. The value is in Token units (and NOT cToken).",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "UniswapV3InitialBalance": {
      "type": "object",
      "required": [
        "amount",
        "unit"
      ],
      "properties": {
        "amount": {
          "description": "The initial amount of token0 or token1 (depending on the unit value) in the pool.",
          "allOf": [
            {
              "$ref": "#/definitions/Amount"
            }
          ],
          "minimum": 0.0
        },
        "unit": {
          "description": "Specifies if the amount is specified in token0 or token1 units.",
          "allOf": [
            {
              "$ref": "#/definitions/BalanceUnit"
            }
          ]
        }
      }
    },
    "UniswapV3Protocol": {
      "type": "object",
      "required": [
        "initial_state"
      ],
      "properties": {
        "initial_state": {
          "description": "The initial state of the protocol refers to the state of the protocol at the start of the simulation. This includes market parameters and initial balances of the underlying tokens.",
          "allOf": [
            {
              "$ref": "#/definitions/Uniswapv3InitialState"
            }
          ]
        },
        "random_generation_params": {
          "description": "Random generator parameters are needed to generate random transactions of simulated users across the simulated protocols.",
          "anyOf": [
            {
              "$ref": "#/definitions/Pools_for_TransactionGeneration"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uniswapv3InitialState": {
      "type": "object",
      "properties": {
        "custom_state": {
          "description": "Custom state is a type of simulation starting state, where the user has the freedom to set all parameters of the initial state of the underlying market and token balances.",
          "anyOf": [
            {
              "$ref": "#/definitions/Pools_for_UniswapV3CustomState"
            },
            {
              "type": "null"
            }
          ]
        },
        "historical_state": {
          "description": "The historical state is a type of simulation start state. The simulation is initialized using a snapshot of the market at the given starting timestamp or block number.",
          "anyOf": [
            {
              "$ref": "#/definitions/Pools_for_UniswapV3HistoricalState"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ValueDistribution": {
      "oneOf": [
        {
          "description": "A uniform random process is a stochastic process in which the probability distribution of the random variable at any given time is uniform across a specified range. In other words, every value within the range has an equal probability of occurring at any given point in time, and these probabilities remain constant over time.",
          "type": "object",
          "required": [
            "uniform"
          ],
          "properties": {
            "uniform": {
              "$ref": "#/definitions/UniformDistribution"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A normal random process with one random variable, also known as a Gaussian process, or a univariate normal process, is a stochastic process characterized by having its values drawn from a normal (Gaussian) distribution at every point in time or space. In simpler terms, it is a sequence of random numbers where each number follows a normal distribution.",
          "type": "object",
          "required": [
            "normal"
          ],
          "properties": {
            "normal": {
              "$ref": "#/definitions/NormalDistribution"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "discrete"
          ],
          "properties": {
            "discrete": {
              "$ref": "#/definitions/Discrete"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "two_dim_discrete"
          ],
          "properties": {
            "two_dim_discrete": {
              "$ref": "#/definitions/Discrete"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WalletBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/Amount"
        }
      ],
      "minimum": 0.0
    },
    "WhiteGaussianNoise": {
      "description": "White Gaussian Noise is a stochastic process often used to represent random market fluctuations or random noise in data. The parameters are ignored,if calibrated as True, but are mandatory if calibrated as False.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "calibrate"
          ],
          "properties": {
            "calibrate": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "$ref": "#/definitions/SpotMeanProps"
        }
      ]
    }
  }
}